stages:
- security_testing
- build
- test
- deploy-kubernetes

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  DOCKER_IMAGE: ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/book-service/book-service:${CI_COMMIT_SHA}
  # Add NVD API key for better dependency check results
  NVD_API_KEY: ${NVD_API_KEY}
  KUBE_NAMESPACE: book-service
  KUBE_CLUSTER: ${GCP_PROJECT_ID}-gke

cache:
  paths:
  - book_service/app/.gradle/wrapper
  - book_service/app/.gradle/caches
  - book_service/app/dependency-check-data

static_analysis:
  stage: security_testing
  image: gradle:jdk17
  script:
    - cd book_service
    - gradle spotbugsMain spotbugsTest
    # Check if SpotBugs found any issues
    - |
      if (Test-Path "app/build/reports/spotbugs/main.xml") {
        $xml = [xml](Get-Content "app/build/reports/spotbugs/main.xml")
        $bugCount = $xml.SelectNodes("//BugInstance").Count
        if ($bugCount -gt 0) {
          Write-Host "::warning::SpotBugs found $bugCount potential issues. Please review the detailed report in the artifacts."
          Write-Host "::warning::To view the report, download the artifacts from this job or check the Code Quality report."
          # Exit with code 0 to allow the pipeline to continue, but with a warning
          exit 0
        }
      }
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      codequality: book_service/app/build/reports/spotbugs/main.xml
    paths:
      - book_service/app/build/reports/spotbugs/
  allow_failure: true  # Allow the stage to fail without stopping the pipeline

dependency_check:
  stage: security_testing
  image: gradle:jdk17
  script:
    - cd book_service
    - mkdir -p app/dependency-check-data
    - |
      if (-not $env:NVD_API_KEY) {
        Write-Host "::warning::NVD_API_KEY is not set. Dependency check will run with limited functionality."
        Write-Host "::warning::Please set NVD_API_KEY in GitLab CI/CD variables for better results."
      }
    - gradle dependencyCheckAnalyze
    - if ($LASTEXITCODE -ne 0) { Write-Host "::warning::Dependency check failed" }
    # Check if dependency check report exists and contains vulnerabilities
    - |
      if (Test-Path "app/build/reports/dependency-check-report.html") {
        $html = Get-Content "app/build/reports/dependency-check-report.html" -Raw
        if ($html -match "Vulnerabilities Found") {
          Write-Host "::warning::Dependency check found vulnerabilities. Please review the report in the artifacts."
          Write-Host "::warning::To view the report, download the artifacts from this job."
          # Exit with code 0 to allow the pipeline to continue, but with a warning
          exit 0
        }
      } else {
        Write-Host "::warning::Dependency check report not generated. This might be due to missing NVD API key."
        exit 0
      }
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      dependency_scanning: book_service/app/build/reports/dependency-check-report.json
    paths:
      - book_service/app/build/reports/dependency-check-report.html
      - book_service/app/build/reports/dependency-check-report.json
  allow_failure: true  # Allow the stage to fail without stopping the pipeline

build:
  stage: build
  image: gradle:jdk17
  script:
  - cd book_service
  - gradle build
  artifacts:
    paths:
    - book_service/app/build/libs/*.jar
  dependencies:
  - static_analysis
  - dependency_check

test:
  stage: test
  image: gradle:jdk17
  script:
  - cd book_service
  - gradle test
  dependencies:
  - build

# build-docker-image:
#   stage: build
#   image: docker:latest
#   services:
#     - docker:dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
#     - docker build -t registry.gitlab.com/$CI_PROJECT_PATH:latest ./book_service
#     - docker push registry.gitlab.com/$CI_PROJECT_PATH:latest
#   only:
#     - main

#deploy-cloud-run:
#  stage: deploy-cloud-run
#  image: google/cloud-sdk:latest
#  variables:
#    DOCKER_HOST: npipe:////./pipe/docker_engine
#  script:
#    # Check if Docker is running
#    - if (!(Test-Path "//./pipe/docker_engine")) { throw "Docker Desktop is not running. Please start Docker Desktop and try again." }
#    # Handle service account
#    - $bytes = [System.Text.Encoding]::UTF8.GetBytes($GCP_SERVICE_ACCOUNT_KEY)
#    - $encodedText = [Convert]::ToBase64String($bytes)
#    - Set-Content -Path "$env:TEMP\key.json" -Value $GCP_SERVICE_ACCOUNT_KEY
#    # Configure Google Cloud
#    - gcloud auth activate-service-account --key-file="$env:TEMP\key.json"
#    - gcloud config set project $GCP_PROJECT_ID
#    - gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev
#    # Build and push Docker image
#    - docker build -t $DOCKER_IMAGE ./book_service
#    - docker push $DOCKER_IMAGE
#    # Deploy to Cloud Run
#    - |
#      gcloud run deploy book-service `
#        --image=$DOCKER_IMAGE `
#        --platform=managed `
#        --region=$GCP_REGION `
#        --allow-unauthenticated `
#        --port=8082 `
#        --set-env-vars="SPRING_PROFILES_ACTIVE=prod" `
#        --set-env-vars="INSTANCE_CONNECTION_NAME=${GCP_PROJECT_ID}:europe-west4:book-service-db" `
#        --set-cloudsql-instances=${GCP_PROJECT_ID}:europe-west4:book-service-db `
#        --min-instances=1 `
#        --max-instances=3 `
#        --cpu=1 `
#        --memory=1Gi `
#        --timeout=300 `
#        --execution-environment=gen2 `
#        --service-account=${GCP_SERVICE_ACCOUNT}
#  only:
#    - main

deploy-kubernetes:
  stage: deploy-kubernetes
  image: google/cloud-sdk:latest
  variables:
    DOCKER_HOST: npipe:////./pipe/docker_engine
  script:
    - if (!(Test-Path "//./pipe/docker_engine")) { throw "Docker Desktop is not running. Please start Docker Desktop and try again." }
    - $bytes = [System.Text.Encoding]::UTF8.GetBytes($GCP_K8S_SERVICE_ACCOUNT_KEY)
    - $encodedText = [Convert]::ToBase64String($bytes)
    - Set-Content -Path "$env:TEMP\k8s-key.json" -Value $GCP_K8S_SERVICE_ACCOUNT_KEY
    - gcloud auth activate-service-account --key-file="$env:TEMP\k8s-key.json"
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev
    - docker build -t $DOCKER_IMAGE ./book_service
    - docker push $DOCKER_IMAGE
    - gcloud container clusters get-credentials $KUBE_CLUSTER --region $GCP_REGION --project $GCP_PROJECT_ID
    - kubectl create namespace $KUBE_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    # Create base64 encoded secrets
    - $datasourceUrl = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("jdbc:postgresql://${GCP_PROJECT_ID}:europe-west4:book-service-db/db3"))
    - $datasourceUsername = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("user3"))
    - $datasourcePassword = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("password3"))
    # Apply Kubernetes configurations
    - (Get-Content ./book_service/kubernetes/secrets.yaml) -replace '\${BASE64_ENCODED_DATASOURCE_URL}', $datasourceUrl -replace '\${BASE64_ENCODED_DATASOURCE_USERNAME}', $datasourceUsername -replace '\${BASE64_ENCODED_DATASOURCE_PASSWORD}', $datasourcePassword | kubectl apply -f - -n $KUBE_NAMESPACE
    # Apply service account and resources
    - kubectl apply -f ./book_service/kubernetes/service-account.yaml -n $KUBE_NAMESPACE
    - (Get-Content ./book_service/kubernetes/cloudsql-proxy.yaml) -replace '\${GCP_PROJECT_ID}', $GCP_PROJECT_ID | kubectl apply -f - -n $KUBE_NAMESPACE
    - kubectl apply -f ./book_service/kubernetes/resource-quota.yaml -n $KUBE_NAMESPACE
    # Replace variables in deployment.yaml and apply
    - (Get-Content ./book_service/kubernetes/deployment.yaml) -replace '\${GCP_REGION}', $GCP_REGION -replace '\${GCP_PROJECT_ID}', $GCP_PROJECT_ID -replace '\${CI_COMMIT_SHA}', $CI_COMMIT_SHA | kubectl apply -f - -n $KUBE_NAMESPACE
    - kubectl apply -f ./book_service/kubernetes/service.yaml -n $KUBE_NAMESPACE
  only:
    - main