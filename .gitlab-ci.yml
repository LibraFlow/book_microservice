stages:
- security_testing
- build
- test
- deploy

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  DOCKER_IMAGE: ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/book-service/book-service:${CI_COMMIT_SHA}

cache:
  paths:
  - book_service/app/.gradle/wrapper
  - book_service/app/.gradle/caches
  - book_service/app/dependency-check-data

static_analysis:
  stage: security_testing
  image: gradle:jdk17
  script:
    - cd book_service
    - gradle spotbugsMain spotbugsTest
    # Check if SpotBugs found any issues
    - |
      if (Test-Path "app/build/reports/spotbugs/main.xml") {
        $xml = [xml](Get-Content "app/build/reports/spotbugs/main.xml")
        $bugCount = $xml.SelectNodes("//BugInstance").Count
        if ($bugCount -gt 0) {
          Write-Host "::warning::SpotBugs found $bugCount potential issues. Please review the detailed report in the artifacts."
          Write-Host "::warning::To view the report, download the artifacts from this job or check the Code Quality report."
          # Exit with code 0 to allow the pipeline to continue, but with a warning
          exit 0
        }
      }
  artifacts:
    reports:
      codequality: book_service/app/build/reports/spotbugs/main.xml
    paths:
      - book_service/app/build/reports/spotbugs/
  allow_failure: true  # Allow the stage to fail without stopping the pipeline

# dependency_check:
#   stage: security_testing
#   image: gradle:jdk17
#   script:
#     - cd book_service
#     - mkdir -p app/dependency-check-data
#     - |
#       try {
#         gradle dependencyCheckAnalyze
#       } catch {
#         Write-Host "::warning::Dependency check failed to run. This might be due to missing NVD API key."
#         Write-Host "::warning::Consider setting up an NVD API key for more accurate results."
#       }
#     # Check if dependency check report exists and contains vulnerabilities
#     - |
#       if (Test-Path "app/build/reports/dependency-check-report.html") {
#         $html = Get-Content "app/build/reports/dependency-check-report.html" -Raw
#         if ($html -match "Vulnerabilities Found") {
#           Write-Host "::warning::Dependency check found vulnerabilities. Please review the report in the artifacts."
#           Write-Host "::warning::To view the report, download the artifacts from this job."
#           # Exit with code 0 to allow the pipeline to continue, but with a warning
#           exit 0
#         }
#       } else {
#         Write-Host "::warning::Dependency check report not generated. This might be due to missing NVD API key."
#         Write-Host "::warning::Consider setting up an NVD API key for more accurate results."
#         exit 0
#       }
#   artifacts:
#     paths:
#       - book_service/app/build/reports/dependency-check-report.html
#   allow_failure: true  # Allow the stage to fail without stopping the pipeline

build:
  stage: build
  image: gradle:jdk17
  script:
  - cd book_service
  - gradle build
  artifacts:
    paths:
    - book_service/app/build/libs/*.jar
  dependencies:
  - static_analysis
  # - dependency_check

test:
  stage: test
  image: gradle:jdk17
  script:
  - cd book_service
  - gradle test
  dependencies:
  - build

deploy:
  stage: deploy
  image: google/cloud-sdk:latest
  variables:
    DOCKER_HOST: npipe:////./pipe/docker_engine
  script:
    # Check if Docker is running
    - if (!(Test-Path "//./pipe/docker_engine")) { throw "Docker Desktop is not running. Please start Docker Desktop and try again." }
    # Handle service account
    - $bytes = [System.Text.Encoding]::UTF8.GetBytes($GCP_SERVICE_ACCOUNT_KEY)
    - $encodedText = [Convert]::ToBase64String($bytes)
    - Set-Content -Path "$env:TEMP\key.json" -Value $GCP_SERVICE_ACCOUNT_KEY
    # Configure Google Cloud
    - gcloud auth activate-service-account --key-file="$env:TEMP\key.json"
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev
    # Build and deploy
    - docker build -t $DOCKER_IMAGE ./book_service
    - docker push $DOCKER_IMAGE
    - gcloud run deploy book-service
      --image=$DOCKER_IMAGE
      --platform=managed
      --region=$GCP_REGION
      --allow-unauthenticated
  only:
    - main