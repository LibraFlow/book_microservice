stages:
  - lint
  - build
  - test
  - deploy

variables:
  # Gradle-specific variables
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

# Cache Gradle dependencies to speed up builds
cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

lint:
  stage: lint
  image: gradle:jdk17
  script:
    - cd book_service
    - gradle ktlintCheck # or gradle checkstyleMain, depending on your linting tool
  allow_failure: true # Optional: Allows the pipeline to continue even if linting fails

build:
  stage: build
  image: gradle:jdk17
  script:
    - cd book_service
    - gradle build
  artifacts:
    paths:
      - book_service/build/libs/*.jar

test:
  stage: test
  image: gradle:jdk17
  script:
    - cd book_service
    - gradle test
  dependencies:
    - build

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd database
    - docker-compose up -d
    - cd ../book_service
    - docker build -t book_service:latest .
    - docker run -d --name book_service_app --network host book_service:latest
  only:
    - main # Deploy only when changes are pushed to the main branch